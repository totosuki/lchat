name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: lchat-client
            server_name: lchat-server
            archive_name: lchat-mac-aarch64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: lchat-client
            server_name: lchat-server
            archive_name: lchat-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: lchat-client.exe
            server_name: lchat-server.exe
            archive_name: lchat-windows-x86_64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: lchat/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build client
      run: |
        cd lchat
        cargo build --release --target ${{ matrix.target }} --bin client

    - name: Build server
      run: |
        cd lchat
        cargo build --release --target ${{ matrix.target }} --bin server

    - name: Create output directory
      run: mkdir -p output

    - name: Copy binaries (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp lchat/target/${{ matrix.target }}/release/client output/${{ matrix.binary_name }}
        cp lchat/target/${{ matrix.target }}/release/server output/${{ matrix.server_name }}

    - name: Copy binaries (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy lchat\target\${{ matrix.target }}\release\client.exe output\${{ matrix.binary_name }}
        copy lchat\target\${{ matrix.target }}\release\server.exe output\${{ matrix.server_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.archive_name }}
        path: output/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release archives
      run: |
        for dir in lchat-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            if [[ "$dir" == *"windows"* ]]; then
              zip -r "../${dir}.zip" .
            else
              tar -czf "../${dir}.tar.gz" .
            fi
            cd ..
          fi
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.tar.gz
          *.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}